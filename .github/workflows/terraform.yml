name: Terraform Deployment

on:
  push:
    branches:
      - feature/*  # Trigger workflow on any feature branch
  pull_request:
    branches:
      - dev        # Trigger workflow on pull request to dev
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write  # Allow workflow to create a pull request

jobs:
  terraform:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step to login to Azure using OIDC (keep this step)
      - name: Login to Azure using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Set environment variables for Terraform to use Service Principal auth
      - name: Set Terraform Azure credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      # Cache Terraform providers
      - name: Cache Terraform Providers
        uses: actions/cache@v2
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
          restore-keys: terraform-${{ runner.os }}-

      # Terraform Init
      - name: Terraform Init
        run: terraform init

      # Terraform Plan (for feature branches)
      - name: Terraform Plan
        if: github.ref_name != 'dev'  # Only plan on feature branches
        run: terraform plan -var-file=dev_terraform.tfvars -out=plan.out

      # Automate Pull Request Creation from Feature Branch to Dev
      - name: Create Pull Request to dev
        if: github.ref_name != 'dev'  # Only create PR for feature branches
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          gh pr create --title "Merge ${{ github.ref_name }} into dev" \
            --body "Auto-generated PR from feature branch." \
            --base dev \
            --head ${{ github.ref_name }}

      # Terraform Apply (only when merged into dev)
      #- name: Terraform Apply
      #  if: github.ref_name == 'dev' && github.event_name == 'pull_request' && github.event.action == 'closed'
       # run: terraform apply -auto-approve plan.out
       # if: github.ref == 'refs/heads/dev'       # Conditional check for dev branch



